type AddResponse {
  result: Int!
}

type RandomDie {
  ip: String
  numSides: Int!
  rollOnce: Int!
  roll(numRolls: Int!): [Int]
}

input MessageInput {
  content: String
  author: String
}

type Message {
  id: String!
  content: String
  author: String
}

type MessageServiceRead {
  getAll: [Message]
  getMessage(id: ID!): Message
}

type MessageServiceWrite {
  createMessage(input: MessageInput!): Message!
  updateMessage(id: ID!, input: MessageInput): Message!
}

type Query {
  hello: String
  add(a: Int!, b: Int!): AddResponse
  getDie(numSides: Int): RandomDie
  messages: MessageServiceRead
}

type Mutation {
  messages: MessageServiceWrite
}
